name: Create Image PR

on:
  workflow_call:
    inputs:
      date:
        description: 'Event Date (YYYY-MM-DD)'
        required: true
        type: string
      image:
        description: 'Image Type (banner, meetup)'
        default: banner
        type: string

jobs:
  create-banner:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Generate unique branch name
        id: branchname
        run: |
          # Using a combination of the event date and a unique suffix (UUID)
          echo "branchname=image-${{ inputs.date }}-$(uuidgen)" >> $GITHUB_OUTPUT

      - name: Configure git
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"

      - name: Create new branch
        run: git checkout -b ${{ steps.branchname.outputs.branchname }}

      - name: Create Image
        run: |
          npm i tsx -g
          cd ./packages/image-generator
          npm i
          cd ../..

          IFS=',' read -ra ADDR <<< "${{ inputs.image }}"
          for i in "${ADDR[@]}"; do
            trimmed=$(echo "$i" | xargs) # Trim whitespace
            # Create directory if it doesn't exist
            
            echo "$trimmed"

            mkdir -p "./public/${trimmed}"
            
            tsx --tsconfig ./packages/image-generator/tsconfig.json ./packages/image-generator/cli.ts --image "${trimmed}" --date ${{ inputs.date }} > "./public/${trimmed}/${{ inputs.date }}.png"
          done

      - name: Generate unique branch name
        id: message
        run: |
          MESSAGE="Add image(s) ${{ inputs.image }} for ${{ inputs.date }}"
          echo "message=$MESSAGE" >> $GITHUB_OUTPUT

      - name: Commit files
        run: |
          git add .
          git commit -m "${{ steps.message.outputs.message }}"

      - name: Push changes
        run: git push origin ${{ steps.branchname.outputs.branchname }}

      - name: Create PR
        uses: actions/github-script@v6
        with:
          script: |
            const headBranch = '${{ steps.branchname.outputs.branchname }}';
            const baseBranch = 'main'; // Ensure this matches your repo's default branch

            github.rest.pulls.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: "${{ steps.message.outputs.MESSAGE }}",
              head: headBranch,
              base: baseBranch,
              body: "${{ steps.message.outputs.MESSAGE }}",
            });
